<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://vjs.zencdn.net/8.3.0/video-js.css" rel="stylesheet"/>
    <link href="https://curio.oli.cmu.edu/style.css" rel="stylesheet"/>
    <title>Video Player</title>
  </head>
  <body>
    <div id="myModal" class="modal">
      <div class="modal-content">
        <span id="close-btn" class="close">&times;</span>
        <div class="modal-header" id="modal-header"></div>
        <div class="modal-tabs">
          <div class="tab active" data-tab="videos">Videos</div>
          <div class="tab" data-tab="practice">Practice</div>
          <div class="tab" data-tab="courses">Courses</div>
          <div class="tab" data-tab="learning-path">Learning Path</div>
        </div>
        <div id="videos" class="tab-content active"></div>
        <div id="practice" class="tab-content"></div>
        <div id="courses" class="tab-content"></div>
        <div id="learning-path" class="tab-content"></div>
      </div>
    </div>
    <button id="capture-btn">Capture</button>
    <script src='https://curio.oli.cmu.edu/tesseract.min.js'></script>
    <script src="https://curio.oli.cmu.edu/video.min.js"></script>
    <script type="text/javascript">
      const modal = document.getElementById("myModal");
      const span = document.getElementsByClassName("close")[0];
      const modalText = document.getElementById("modal-text");
      const expCondEnum = Object.freeze({
        PRAC: 0,
        LOW: 1,
        HIGH: 2,
        LOW_LO: 3,
        HIGH_LO: 4
      });
      const materials = [];

      var video;
      var selecting = false;
      var startPoint = {
        x: 0,
        y: 0
      };
      var endPoint = {
        x: 0,
        y: 0
      };
      var captureBtn = document.getElementById('capture-btn');
      var selection = null;
      var lo = "";
      var currentCond = 0;

      materials.push({video: {{ video | safe }}})
      lo = materials[0].video.learningObjs[0];
      span.onclick = function () {
        modal.style.display = "none";
      }
      window.onclick = function (event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }
      async function searchVideos(text, userID, lo, cond) {
        try {
          let lmScore;
          if (cond < expCondEnum.LOW_LO) 
            lmScore = 0;
          else
            lmScore = cond == expCondEnum.LOW_LO ? 1 : -1;
          const response = await fetch("https://curio.oli.cmu.edu/videos/search", {
            method: "POST",
            body: new URLSearchParams({text, lo, userID, lmScore})
          });
          if (! response.ok) {
            throw new Error(`HTTP error! status: ${
              response.status
            }`);
          }
          return await response.json();
        } catch (error) {
          console.error('Error:', error);
        }
      }
      function initPlayer(material) {
        const player = document.createElement('video');
        player.setAttribute('id', 'my-video');
        player.setAttribute('class', 'video-js');
        player.setAttribute('crossorigin', 'anonymous');
        // Available attrs: https://videojs.com/guides/options
        player.setAttribute(
          'data-setup',
          `{
            "preload": "auto",
            "controls": "controls",
            "width": "1280",
            "height": "720"
          }`
        );
        console.log(material.video.filename);
        // Remove https://curio.oli.cmu.edu/ in production env.
        player.innerHTML = `
          <source src="https://curio.oli.cmu.edu/${material.video.filename}" type="video/mp4">
          <track kind="captions" src="https://curio.oli.cmu.edu/${material.video.captionFile}" srclang="en" label="English" default>
        `
        document.body.insertBefore(player, document.body.firstChild);
        return document.body.insertBefore(player, document.body.firstChild);
      }
      function msToTime(s) {
        function pad(n, z) {
          z = z || 2;
          return('00' + n).slice(- z);
        }
        var ms = s % 1000;
        s = (s - ms) / 1000;
        var secs = s % 60;
        s = (s - secs) / 60;
        var mins = s % 60;
        var hrs = (s - mins) / 60;
        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);
      }
      function startSelection(e) {
        selecting = true;
        startPoint = {
          x: e.offsetX,
          y: e.offsetY
        };
        // Create selection element
        selection = document.createElement('div');
        selection.className = 'selection';
        selection.style.left = `${startPoint.x}px`;
        selection.style.top = `${startPoint.y}px`;
        document.body.appendChild(selection);
      }
      function updateSelection(e) {
        if (! selecting || ! selection) 
          return;
        
        endPoint = {
          x: e.offsetX,
          y: e.offsetY
        };
        // Calculate left and top for the selection
        const left = Math.min(startPoint.x, endPoint.x);
        const top = Math.min(startPoint.y, endPoint.y);
        // Update selection element
        selection.style.width = `${Math.abs(endPoint.x - startPoint.x)}px`;
        selection.style.height = `${Math.abs(endPoint.y - startPoint.y)}px`;
        selection.style.left = `${left}px`;
        selection.style.top = `${top}px`;
      }
      function stopSelection(e) {
        selecting = false;
        endPoint = {
          x: e.offsetX,
          y: e.offsetY
        };
        // Remove selection element
        if (selection) {
          document.body.removeChild(selection);
          selection = null;
        }
        stopCaptureMode(); // Call stopCaptureMode here
        detect();
      }
      function capture(video, x, y, w, h) {
        const bBox = video.getBoundingClientRect();
        const scaleX = video.videoWidth / bBox['width'];
        const scaleY = video.videoHeight / bBox['height'];
        const canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, x * scaleX, y * scaleY, w * scaleX, h * scaleY, 0, 0, w, h);
        return canvas;
      }
      const detect = async () => {
        const video = document.getElementById('my-video_html5_api');
        const width = Math.abs(endPoint.x - startPoint.x);
        const height = Math.abs(endPoint.y - startPoint.y);
        const x = Math.min(startPoint.x, endPoint.x);
        const y = Math.min(startPoint.y, endPoint.y);
        if (width <= 0 || height <= 0) {
          console.log('Invalid selection area. Please make sure the selection width and height are greater than 0.');
          return;
        }
        const canvas = capture(video, x, y, width, height);
        canvas.toBlob(async (blob) => {
          const worker = await Tesseract.createWorker();
          await worker.loadLanguage('eng');
          await worker.initialize('eng');
          await worker.setParameters({tessedit_ocr_engine_mode: Tesseract.OEM.LSTM_ONLY, tessedit_pageseg_mode: Tesseract.SPARSE_TEXT});
          const output = await worker.recognize(blob);
          console.log(output);
          console.log(output.data.text);
          // Inside your detect function, after getting output.data.text
          const outputText = output.data.text.slice(0,-1);
          const userID = "your-user-id"; // TODO: Replace with actual user id
          const summary = await fetchSummary(outputText.split(' ', 3).join(' ')); // Fetches summary for the first three words of outputText
          const firstThreeLines = summary
            .split('. ')
            .slice(0, 3)
            .join('. ') + '...'; // Extracts first three sentences from summary After defining the videos array...
          const modal = document.getElementById("myModal");
          const modalHeader = document.getElementById("modal-header");
          const videosTab = document.getElementById("videos");
          const tabs = Array.from(document.getElementsByClassName("tab"));
          const tabContents = Array.from(document.getElementsByClassName("tab-content"));
          if (summary !== "An error occurred while fetching the summary.") {
            modalHeader.innerHTML = `${outputText} <br> <p>${firstThreeLines}<a href="https://en.wikipedia.org/wiki/${outputText}" target="_blank" style="text-decoration:underline;">Expand</a></p>`;
          } else {
            modalHeader.innerHTML = `${outputText}`;
          } tabs.forEach(tab => {
            tab.addEventListener("click", () => {
              const target = tab.dataset.tab;
              tabs.forEach(t => t.classList.remove("active"));
              tabContents.forEach(t => t.classList.remove("active"));
              tab.classList.add("active");
              document
                .getElementById(target)
                .classList
                .add("active");
              tabs.forEach(t => t.style.fontWeight = "normal");
              tab.style.fontWeight = "bold";
            });
          });
          // Close the modal when the close span is clicked
          span.onclick = function () {
            modal.style.display = "none";
          }
          // TODO: when SwaggerUI is implemented use below code
          const searchRes = await searchVideos(outputText, userID, lo, currentCond);
          // Display videos in the modal
          const promiseOfSearchRes = searchRes.map(res => new Promise(async (resolve, reject) => {
            const meta = res._source;
            console.log(meta);
            const [filename, captionFile] = await getVideoPath(meta.video_id)
            resolve([meta, filename, captionFile])
          }));
          await Promise.all(promiseOfSearchRes).then((resolve) => {resolve.forEach(
            res => {
              const [meta, filename, captionFile] = res;
              const startTime = meta.start_time; // in milliseconds
              const endTime = meta.end_time; // in milliseconds
              const duration = endTime - startTime; // duration in milliseconds
              const durationInSeconds = msToTime(duration); // convert to mm:ss
              videosTab.innerHTML+= `
                <div class="video-info" 
                  data-video-src="https://curio.oli.cmu.edu/${filename}#t=${startTime / 1000}"
                  data-caption-file="https://curio.oli.cmu.edu/${captionFile}"
                  data-video-title="${meta.video_title.replaceAll('_', ' ')}"
                  data-course-name="${meta.course_name.replaceAll('_', ' ')}"
                  data-start-time="${startTime}">
                  <div class="video-thumbnail">
                    <video id="video-player" controls style="width: 100%; height: 100%;">
                      <source src="https://curio.oli.cmu.edu/${filename}#t=${startTime / 1000}" type="video/mp4">
                      Your browser does not support the video tag.
                    </video>
                    <span class="video-duration">${durationInSeconds}</span>
                  </div>
                  <div class="video-details">
                    <p><strong>${
                      meta.video_title.replaceAll('_', ' ')
                    }</strong></p>
                    <p>"${meta.text}"</p>
                    <p>${
                      meta.course_name.replaceAll('_', ' ')
                    }</p>
                  </div>
                </div>
                <br>`
              }
          )});
          modal.style.display = "block";
          // Adding event listener on .video-info div
          const videoInfoDivs = document.querySelectorAll('.video-info');
          videoInfoDivs.forEach(div => {
            div.addEventListener('click', (e) => { // Load video and transcript
              const videoSrc = e
                .currentTarget
                .dataset
                .videoSrc;
              const videoTitle = e
                .currentTarget
                .dataset
                .videoTitle;
              const transcript = e
                .currentTarget
                .dataset
                .captionFile;
              const courseName = e
                .currentTarget
                .dataset
                .courseName;
              const startTime = e
                .currentTarget
                .dataset
                .startTime;
              // Save current modal content before changing it
              const prevModalContent = document.querySelector('.modal-content').innerHTML;
              // Load video and transcript const transcript = loadTranscript(videoId); // TODO: Assuming loadTranscript function
              // exists Update modal content
              const modalContent = `
                <div class="row">
                  <button id="back-btn">-></button>
                </div>
                <div class="row">
                  <h2>${videoTitle}</h2>
                </div>
                <div class="row">
                <video id="video-player" controls style="width: 100%; height: 100%;">
                  <source src="${videoSrc}" type="video/mp4">
                  <track kind="captions"
                    src="${transcript}"
                    srclang="en" label="English" default>
                  Your browser does not support the video tag.
                </video>
                </div>
                <div class="row">
                  <p><strong>Course: </strong>${courseName}</p>
                </div>
              `;
              document.querySelector('.modal-content').innerHTML = modalContent;
              // Add event listener on back button to revert to previous state
              document.querySelector('#back-btn').addEventListener('click', () => {
                document.querySelector('.modal-content').innerHTML = prevModalContent; // Assuming prevModalContent exists Adding event listener on .video-info div again
                const videoInfoDivs = document.querySelectorAll('.video-info');
                videoInfoDivs.forEach(div => {
                  div.addEventListener('click', (e) => {
                    const videoSrc = e
                      .currentTarget
                      .dataset
                      .videoSrc;
                    const videoId = e
                      .currentTarget
                      .dataset
                      .videoId;
                    const transcript = e
                      .currentTarget
                      .dataset
                      .captionFile;
                    const videoTitle = e
                      .currentTarget
                      .dataset
                      .videoTitle;
                    const courseName = e
                      .currentTarget
                      .dataset
                      .courseName;
                    const startTime = e
                      .currentTarget
                      .dataset
                      .startTime;
                    // Save current modal content before changing it
                    const prevModalContent = document.querySelector('.modal-content').innerHTML;
                    // Update modal content
                    const modalContent = `
                      <div class="row">
                        <button id="back-btn">-></button>
                      </div>
                      <div class="row">
                        <h2>${videoTitle}</h2>
                      </div>
                      <div class="row">
                      <video id="video-player" controls>
                        <source src="${videoSrc}" type="video/mp4">
                        Your browser does not support the video tag.
                      </video>
                      </div>
                      <div class="row">
                        <p><strong>Course: </strong>${courseName}</p>
                      </div>
                    `;
                    document.querySelector('.modal-content').innerHTML = modalContent;
                    // Add event listener on back button to revert to previous state
                    document.querySelector('#back-btn').addEventListener('click', () => {
                      document.querySelector('.modal-content').innerHTML = prevModalContent; // Assuming prevModalContent exists
                    });
                  });
                });
              });
            });
          });
        });
      };
      // Fetch the first three sentences from Wikipedia
      async function fetchSummary(term, context = "") {
        try {
          const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${term}`);
          if (! response.ok) {
            throw new Error(`HTTP error! status: ${
              response.status
            }`);
          }
          const json = await response.json();
          return json.extract || "Summary not available."; // If extract is empty, return a default message
        } catch (error) {
          console.error('Error:', error);
          return "An error occurred while fetching the summary."; // Return a default message on error
        }
      }
      function msToTime(duration) {
        var seconds = parseInt((duration / 1000) % 60),
          minutes = parseInt((duration / (1000 * 60)) % 60),
          hours = parseInt((duration / (1000 * 60 * 60)) % 24);
        hours = (hours < 10)
          ? "0" + hours
          : hours;
        minutes = (minutes < 10)
          ? "0" + minutes
          : minutes;
        seconds = (seconds < 10)
          ? "0" + seconds
          : seconds;
        return(hours === "00")
          ? minutes + ":" + seconds
          : hours + ":" + minutes + ":" + seconds;
      }
      function startCaptureMode() {
        document
          .body
          .classList
          .add('capture-mode');
        video.addEventListener('mousedown', startSelection);
        video.addEventListener('mousemove', updateSelection);
        video.addEventListener('mouseup', stopSelection);
      }
      function stopCaptureMode() {
        document
          .body
          .classList
          .remove('capture-mode');
        video.removeEventListener('mousedown', startSelection);
        video.removeEventListener('mousemove', updateSelection);
        video.removeEventListener('mouseup', stopSelection);
      }
      captureBtn.addEventListener('click', startCaptureMode);
      window.addEventListener('load', () => {
        video = initPlayer(materials[0]);
      })
      async function getVideoPath(video_id) {
        try {
          const response = await fetch(`https://curio.oli.cmu.edu/videos/${video_id}`, {method: "GET"});
          if (! response.ok) {
            throw new Error(`HTTP error! status: ${
              response.status
            }`);
          }
          const data = await response.json();
          return [data.filename, data.captionFile];
        } catch (error) {
          console.error('Error:', error);
        }
      }
    </script>
  </body>
</html>